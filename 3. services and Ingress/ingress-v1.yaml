apiVersion: apps/v1   # Определяет API-версию, используемую для создания Deployment
kind: Deployment      # Указывает, что создается объект типа Deployment
metadata:             # Метаданные для Deployment
  name: my-web-deployment   # Имя развертывания (Deployment)
  labels:           # Метки, которые можно использовать для группировки и фильтрации ресурсов
    env: prod       # Метка окружения, указывает, что это продакшн
    app: main       # Метка, идентифицирующая приложение
    owner: Evgeny   # Метка владельца ресурса
spec:               # Основная спецификация Deployment
  replicas: 3       # Количество реплик (подов), которые должны быть запущены
  selector:         # Указывает, какие поды принадлежат этому Deployment
    matchLabels:    # Определяет соответствие меткам
      app: main     # Ищет поды с меткой app: main
  template:         # Шаблон для создаваемых подов
    metadata:       # Метаданные для подов
      labels:       # Метки, которые будут назначены подам
        app: main   # Метка для идентификации подов
    spec:           # Спецификация подов
      containers:   # Определяет список контейнеров внутри пода
        - name: my-php-app    # Имя контейнера в поде
          image: petrovevgeny/my-php-app:v1.0   # Docker-образ, который будет использоваться в контейнере
          ports:                  # Определяет список портов, которые контейнер будет слушать
            - containerPort: 80   # Открывает порт 80 внутри контейнера для входящих подключений
          resources:              # Определяет ограничения ресурсов для контейнера
            limits:               # Ограничения на использование ресурсов
              memory: "256M"      # Максимальное количество памяти, которое может использовать контейнер (256 мегабайт)
              cpu: "500m"         # Максимальное количество процессорного времени, которое может использовать контейнер (500 милли-CPU, что соответствует 0.5 CPU)

---
# Разделитель, указывающий на начало нового ресурса в том же файле YAML.

apiVersion: v1    # Указывает версию API для этого ресурса, "v1" — основная версия для Service.
kind: Service     # Определяет тип ресурса, здесь это Service для обеспечения сетевого доступа к подам.
metadata:         # Метаданные содержат информацию о самом Service.
  name: my-single-service # Имя Service, используется для обращения к нему в кластере.
spec:                     # Спецификация определяет желаемое состояние Service.
  type: ClusterIP         # Устанавливает тип Service как ClusterIP, доступен только внутри кластера (по умолчанию).
  ports:                  # Определяет порты, которые Service открывает, и как они связаны с подами.
    - name: app-listener  # Имя порта для удобства, полезно при нескольких портах.
      protocol: TCP       # Указывает протокол для порта, TCP — стандарт для веб-трафика.
      port: 3000          # Порт (3000), на котором Service слушает внутри кластера.
      targetPort: 80      # Порт на целевых подах (80), куда перенаправляется трафик, соответствует containerPort.
  selector:               # Выбирает поды, к которым Service направляет трафик, по меткам.
    app: main             # Соответствует подам с меткой "app: main", связывает Service с подами Deployment.

---
# Разделитель, указывающий на начало нового ресурса в том же файле YAML.

apiVersion: networking.k8s.io/v1  # Указывает версию API для этого ресурса.
kind: Ingress                     # Определяет тип ресурса, здесь это Ingress для управления внешним доступом к Service.
metadata:                         # Метаданные содержат информацию о самом Ingress.
  name: my-ingress                # Имя Ingress.
  annotations:                    # Аннотации добавляют дополнительную конфигурацию для контроллера Ingress (например, NGINX).
    nginx.ingress.kubernetes.io/add-base-url: "true" # Добавляет базовый URL к ответам, полезно для переписывания URL в NGINX.
spec:                             # Спецификация определяет желаемое состояние Ingress.
  ingressClassName: nginx         # Указывает класс Ingress (nginx), связывает его с контроллером NGINX.
  rules:                          # Определяет правила маршрутизации входящего трафика.
    - host: app.lan               # Указывает хост (домен), к которому применяется это правило (app.lan).
      http:                       # Определяет правила маршрутизации для HTTP-трафика.
        paths:                    # Список путей для маршрутизации трафика этого хоста.
          - pathType: Prefix      # Указывает, что путь — это префикс, то есть включает "/" и подпуть (например, "/about").
            path: "/"             # Определяет путь (корень), для которого применяется правило.
            backend:              # Указывает бэкенд (Service), куда направляется трафик.
              service:            # Ссылка на Service, определенный ранее.
                name: my-single-service # Имя Service ("my-single-service"), к которому идет трафик.
                port:             # Указывает порт Service, на который направляется трафик.
                  number: 3000    # Номер порта (3000), соответствующий порту Service.